
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002392  00002426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800072  00800072  00002438  2**0
                  ALLOC
  3 .stab         00002b44  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ac  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000064d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_18>
      4c:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 10 	call	0x2158	; 0x2158 <main>
      8a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include"ADC_Private.h"
//#include"ADC_Interface.h"


void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Select Reference Voltage-->  (AVCC)*/
		SET_BIT(ADMUX,6);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,7);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
		/* Select Left or Right Adjust--> (RIGHT Adjust) */
		CLR_BIT(ADMUX,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
		/* Select Prescaler (128)*/
		SET_BIT(ADCSRA,2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24
		/* ADC Enable */
		SET_BIT(ADCSRA,7);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u16StartConversion>:

u16 ADC_u16StartConversion(u8 Copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u16StartConversion+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	8b 83       	std	Y+3, r24	; 0x03
		u16 LOC_u16DataValue=0;
     bc4:	1a 82       	std	Y+2, r1	; 0x02
     bc6:	19 82       	std	Y+1, r1	; 0x01

		/*Mask the 5 MSB IN the data */
		Copy_u8Channel&=0x07;
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	87 70       	andi	r24, 0x07	; 7
     bcc:	8b 83       	std	Y+3, r24	; 0x03

		/*MASK The 5 LSB In ADMUX Register */
		ADMUX&=0xE0;
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 7e       	andi	r24, 0xE0	; 224
     bda:	8c 93       	st	X, r24

		/*Set your channel*/
		ADMUX|=Copy_u8Channel;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	90 81       	ld	r25, Z
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,6);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8c 93       	st	X, r24

		/*wait ADC Flag until ADC End conversion*/
		while(GET_BIT(ADCSRA,4)==0);
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	81 70       	andi	r24, 0x01	; 1
     c0a:	90 70       	andi	r25, 0x00	; 0
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	a9 f3       	breq	.-22     	; 0xbfa <ADC_u16StartConversion+0x44>

		LOC_u16DataValue=ADC;
     c10:	e4 e2       	ldi	r30, 0x24	; 36
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
		return LOC_u16DataValue;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <Buttons_voidInit>:
#include"EXTI_Interface.h"
#include"Button_Private.h"
#include"Button_Interface.h"
#include<util/delay.h>
void Buttons_voidInit(void)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	//Setting Input Pins for the Buttons
	DIO_u8SetPinDirection(SWITCH_Button,DIO_PORTB,PIN_INPUT);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(UP_Button,DIO_PORTB,PIN_INPUT);
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DOWN_Button,DIO_PORTB,PIN_INPUT);
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinDirection>

	//Setting
	DIO_u8SetPinValue(SWITCH_Button,DIO_PORTB,PIN_HIGH);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(UP_Button,DIO_PORTB,PIN_HIGH);
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DOWN_Button,DIO_PORTB,PIN_HIGH);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>


	//External Interrupt Enable
	GIE_voidEnable();
     c70:	0e 94 44 0c 	call	0x1888	; 0x1888 <GIE_voidEnable>
	EXTI_voidINT2_Init();
     c74:	0e 94 2f 0c 	call	0x185e	; 0x185e <EXTI_voidINT2_Init>
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UP_button>:


u8 UP_button(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	2e 97       	sbiw	r28, 0x0e	; 14
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a8 ec       	ldi	r26, 0xC8	; 200
     c98:	b2 e4       	ldi	r27, 0x42	; 66
     c9a:	8b 87       	std	Y+11, r24	; 0x0b
     c9c:	9c 87       	std	Y+12, r25	; 0x0c
     c9e:	ad 87       	std	Y+13, r26	; 0x0d
     ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	53 e4       	ldi	r21, 0x43	; 67
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8f 83       	std	Y+7, r24	; 0x07
     cbc:	98 87       	std	Y+8, r25	; 0x08
     cbe:	a9 87       	std	Y+9, r26	; 0x09
     cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc2:	6f 81       	ldd	r22, Y+7	; 0x07
     cc4:	78 85       	ldd	r23, Y+8	; 0x08
     cc6:	89 85       	ldd	r24, Y+9	; 0x09
     cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <UP_button+0x66>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <UP_button+0xe4>
	else if (__tmp > 65535)
     ce4:	6f 81       	ldd	r22, Y+7	; 0x07
     ce6:	78 85       	ldd	r23, Y+8	; 0x08
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <UP_button+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     d00:	8d 85       	ldd	r24, Y+13	; 0x0d
     d02:	9e 85       	ldd	r25, Y+14	; 0x0e
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	8d 83       	std	Y+5, r24	; 0x05
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <UP_button+0xc6>
     d26:	89 e1       	ldi	r24, 0x19	; 25
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <UP_button+0xb4>
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <UP_button+0xa8>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <UP_button+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6f 81       	ldd	r22, Y+7	; 0x07
     d50:	78 85       	ldd	r23, Y+8	; 0x08
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <UP_button+0xf0>
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(100);

		if(!(GET_BIT(DIO_PORTB,UP_Button)))
		{
			return PUSHED;
     d76:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return NOT_PUSHED;
	}
}
     d78:	2e 96       	adiw	r28, 0x0e	; 14
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <down_button>:
u8 down_button(void)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	2e 97       	sbiw	r28, 0x0e	; 14
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a8 ec       	ldi	r26, 0xC8	; 200
     da4:	b2 e4       	ldi	r27, 0x42	; 66
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	9c 87       	std	Y+12, r25	; 0x0c
     daa:	ad 87       	std	Y+13, r26	; 0x0d
     dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a e7       	ldi	r20, 0x7A	; 122
     dbc:	53 e4       	ldi	r21, 0x43	; 67
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	98 87       	std	Y+8, r25	; 0x08
     dca:	a9 87       	std	Y+9, r26	; 0x09
     dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <down_button+0x66>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <down_button+0xe4>
	else if (__tmp > 65535)
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	4c f5       	brge	.+82     	; 0xe5a <down_button+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <down_button+0xc6>
     e32:	89 e1       	ldi	r24, 0x19	; 25
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <down_button+0xb4>
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	69 f7       	brne	.-38     	; 0xe32 <down_button+0xa8>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <down_button+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <down_button+0xf0>
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(100);

			if(!(GET_BIT(DIO_PORTB,DOWN_Button)))
			{
				return PUSHED;
     e82:	81 e0       	ldi	r24, 0x01	; 1
		}
		else
		{
			return NOT_PUSHED;
		}
}
     e84:	2e 96       	adiw	r28, 0x0e	; 14
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <heat_voidInit>:
#include"C_H_Interface.h"

//Heating element initialization, starting, and stopping

void heat_voidInit(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(H_PIN,H_PORT,PIN_OUTPUT);
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinDirection>
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <heat_Start>:
void heat_Start(void)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_PIN,H_PORT,PIN_HIGH);
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <heat_Stop>:
void heat_Stop(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_PIN,H_PORT,PIN_LOW);
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <cool_voidInit>:


//Cooling element initialization, starting, and stopping
void cool_voidInit(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(C_PIN,C_PORT,PIN_OUTPUT);
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinDirection>
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <cool_Start>:
void cool_Start(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(C_PIN,C_PORT,PIN_HIGH);
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <cool_Stop>:
void cool_Stop(void)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_PIN,H_PORT,PIN_LOW);
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8SetPinValue>
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_u8SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"


u8 DIO_u8SetPinDirection (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8 Copy_u8PinDirection)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	28 97       	sbiw	r28, 0x08	; 8
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	6b 83       	std	Y+3, r22	; 0x03
     f3e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State =OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinNumber<8 && Copy_u8PinNumber>=0){
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_u8SetPinDirection+0x26>
     f4a:	f1 c0       	rjmp	.+482    	; 0x112e <DIO_u8SetPinDirection+0x208>

		if (Copy_u8PinDirection == PIN_OUTPUT)
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	09 f0       	breq	.+2      	; 0xf54 <DIO_u8SetPinDirection+0x2e>
     f52:	71 c0       	rjmp	.+226    	; 0x1036 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8PortNumber)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	38 87       	std	Y+8, r19	; 0x08
     f5c:	2f 83       	std	Y+7, r18	; 0x07
     f5e:	8f 81       	ldd	r24, Y+7	; 0x07
     f60:	98 85       	ldd	r25, Y+8	; 0x08
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	49 f1       	breq	.+82     	; 0xfba <DIO_u8SetPinDirection+0x94>
     f68:	2f 81       	ldd	r18, Y+7	; 0x07
     f6a:	38 85       	ldd	r19, Y+8	; 0x08
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <DIO_u8SetPinDirection+0x56>
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	98 85       	ldd	r25, Y+8	; 0x08
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	61 f0       	breq	.+24     	; 0xf92 <DIO_u8SetPinDirection+0x6c>
     f7a:	5b c0       	rjmp	.+182    	; 0x1032 <DIO_u8SetPinDirection+0x10c>
     f7c:	2f 81       	ldd	r18, Y+7	; 0x07
     f7e:	38 85       	ldd	r19, Y+8	; 0x08
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	71 f1       	breq	.+92     	; 0xfe2 <DIO_u8SetPinDirection+0xbc>
     f86:	8f 81       	ldd	r24, Y+7	; 0x07
     f88:	98 85       	ldd	r25, Y+8	; 0x08
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	e9 f1       	breq	.+122    	; 0x100a <DIO_u8SetPinDirection+0xe4>
     f90:	50 c0       	rjmp	.+160    	; 0x1032 <DIO_u8SetPinDirection+0x10c>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,Copy_u8PinNumber);
     f92:	aa e3       	ldi	r26, 0x3A	; 58
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ea e3       	ldi	r30, 0x3A	; 58
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_u8SetPinDirection+0x8a>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_u8SetPinDirection+0x86>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	bb c0       	rjmp	.+374    	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,Copy_u8PinNumber);
     fba:	a7 e3       	ldi	r26, 0x37	; 55
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e3       	ldi	r30, 0x37	; 55
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8SetPinDirection+0xb2>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8SetPinDirection+0xae>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	a7 c0       	rjmp	.+334    	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,Copy_u8PinNumber);
     fe2:	a4 e3       	ldi	r26, 0x34	; 52
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e4 e3       	ldi	r30, 0x34	; 52
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_u8SetPinDirection+0xda>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_u8SetPinDirection+0xd6>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	93 c0       	rjmp	.+294    	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,Copy_u8PinNumber);
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_u8SetPinDirection+0x102>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_u8SetPinDirection+0xfe>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	7f c0       	rjmp	.+254    	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State =NOK;
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	7d c0       	rjmp	.+250    	; 0x1130 <DIO_u8SetPinDirection+0x20a>

			}
		}


		else if (Copy_u8PinDirection == PIN_INPUT)
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	88 23       	and	r24, r24
    103a:	09 f0       	breq	.+2      	; 0x103e <DIO_u8SetPinDirection+0x118>
    103c:	76 c0       	rjmp	.+236    	; 0x112a <DIO_u8SetPinDirection+0x204>
		{
			switch (Copy_u8PortNumber)
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3e 83       	std	Y+6, r19	; 0x06
    1046:	2d 83       	std	Y+5, r18	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	59 f1       	breq	.+86     	; 0x10a8 <DIO_u8SetPinDirection+0x182>
    1052:	2d 81       	ldd	r18, Y+5	; 0x05
    1054:	3e 81       	ldd	r19, Y+6	; 0x06
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <DIO_u8SetPinDirection+0x140>
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	69 f0       	breq	.+26     	; 0x107e <DIO_u8SetPinDirection+0x158>
    1064:	60 c0       	rjmp	.+192    	; 0x1126 <DIO_u8SetPinDirection+0x200>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	89 f1       	breq	.+98     	; 0x10d2 <DIO_u8SetPinDirection+0x1ac>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <DIO_u8SetPinDirection+0x156>
    107a:	40 c0       	rjmp	.+128    	; 0x10fc <DIO_u8SetPinDirection+0x1d6>
    107c:	54 c0       	rjmp	.+168    	; 0x1126 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,Copy_u8PinNumber);
    107e:	aa e3       	ldi	r26, 0x3A	; 58
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ea e3       	ldi	r30, 0x3A	; 58
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8SetPinDirection+0x176>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_u8SetPinDirection+0x172>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	44 c0       	rjmp	.+136    	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,Copy_u8PinNumber);
    10a8:	a7 e3       	ldi	r26, 0x37	; 55
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e7 e3       	ldi	r30, 0x37	; 55
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8SetPinDirection+0x1a0>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8SetPinDirection+0x19c>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	2f c0       	rjmp	.+94     	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,Copy_u8PinNumber);
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_u8SetPinDirection+0x1ca>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_u8SetPinDirection+0x1c6>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	1a c0       	rjmp	.+52     	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,Copy_u8PinNumber);
    10fc:	a1 e3       	ldi	r26, 0x31	; 49
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8SetPinDirection+0x1f4>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8SetPinDirection+0x1f0>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State =NOK;
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <DIO_u8SetPinDirection+0x20a>
			}
		}

		else
		{
			Error_State =NOK;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <DIO_u8SetPinDirection+0x20a>
		}
	}
	else
	{
		Error_State =NOK;
    112e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State ;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	28 96       	adiw	r28, 0x08	; 8
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue	 (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8 Copy_u8PinValue)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_u8SetPinValue+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_u8SetPinValue+0x8>
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_u8SetPinValue+0xa>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6b 83       	std	Y+3, r22	; 0x03
    1156:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortNumber)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3e 83       	std	Y+6, r19	; 0x06
    1164:	2d 83       	std	Y+5, r18	; 0x05
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <DIO_u8SetPinValue+0x2e>
    1170:	48 c0       	rjmp	.+144    	; 0x1202 <DIO_u8SetPinValue+0xbe>
    1172:	2d 81       	ldd	r18, Y+5	; 0x05
    1174:	3e 81       	ldd	r19, Y+6	; 0x06
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <DIO_u8SetPinValue+0x42>
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	71 f0       	breq	.+28     	; 0x11a0 <DIO_u8SetPinValue+0x5c>
    1184:	d1 c0       	rjmp	.+418    	; 0x1328 <DIO_u8SetPinValue+0x1e4>
    1186:	2d 81       	ldd	r18, Y+5	; 0x05
    1188:	3e 81       	ldd	r19, Y+6	; 0x06
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <DIO_u8SetPinValue+0x4e>
    1190:	69 c0       	rjmp	.+210    	; 0x1264 <DIO_u8SetPinValue+0x120>
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <DIO_u8SetPinValue+0x5a>
    119c:	94 c0       	rjmp	.+296    	; 0x12c6 <DIO_u8SetPinValue+0x182>
    119e:	c4 c0       	rjmp	.+392    	; 0x1328 <DIO_u8SetPinValue+0x1e4>
	{
	case DIO_PORTA:
		if (Copy_u8PinValue == PIN_HIGH)
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <DIO_u8SetPinValue+0x8a>
		{
			SET_BIT(PORTA,Copy_u8PinNumber);
    11a6:	ab e3       	ldi	r26, 0x3B	; 59
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e3       	ldi	r30, 0x3B	; 59
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_u8SetPinValue+0x80>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_u8SetPinValue+0x7c>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	ae c0       	rjmp	.+348    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	88 23       	and	r24, r24
    11d2:	a9 f4       	brne	.+42     	; 0x11fe <DIO_u8SetPinValue+0xba>
		{
			CLR_BIT(PORTA,Copy_u8PinNumber);
    11d4:	ab e3       	ldi	r26, 0x3B	; 59
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	eb e3       	ldi	r30, 0x3B	; 59
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8SetPinValue+0xae>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8SetPinValue+0xaa>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	96 c0       	rjmp	.+300    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	94 c0       	rjmp	.+296    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTB:
		if (Copy_u8PinValue == PIN_HIGH)
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	a1 f4       	brne	.+40     	; 0x1230 <DIO_u8SetPinValue+0xec>
		{
			SET_BIT(PORTB,Copy_u8PinNumber);
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8SetPinValue+0xe2>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8SetPinValue+0xde>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	7d c0       	rjmp	.+250    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	88 23       	and	r24, r24
    1234:	a9 f4       	brne	.+42     	; 0x1260 <DIO_u8SetPinValue+0x11c>
		{
			CLR_BIT(PORTB,Copy_u8PinNumber);
    1236:	a8 e3       	ldi	r26, 0x38	; 56
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e8 e3       	ldi	r30, 0x38	; 56
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8SetPinValue+0x110>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8SetPinValue+0x10c>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	65 c0       	rjmp	.+202    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    1260:	19 82       	std	Y+1, r1	; 0x01
    1262:	63 c0       	rjmp	.+198    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTC:
		if (Copy_u8PinValue == PIN_HIGH)
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	a1 f4       	brne	.+40     	; 0x1292 <DIO_u8SetPinValue+0x14e>
		{
			SET_BIT(PORTC,Copy_u8PinNumber);
    126a:	a5 e3       	ldi	r26, 0x35	; 53
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e3       	ldi	r30, 0x35	; 53
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8SetPinValue+0x144>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8SetPinValue+0x140>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	4c c0       	rjmp	.+152    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 23       	and	r24, r24
    1296:	a9 f4       	brne	.+42     	; 0x12c2 <DIO_u8SetPinValue+0x17e>
		{
			CLR_BIT(PORTC,Copy_u8PinNumber);
    1298:	a5 e3       	ldi	r26, 0x35	; 53
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e3       	ldi	r30, 0x35	; 53
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_u8SetPinValue+0x172>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_u8SetPinValue+0x16e>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	34 c0       	rjmp	.+104    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	32 c0       	rjmp	.+100    	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTD:
		if (Copy_u8PinValue == PIN_HIGH)
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <DIO_u8SetPinValue+0x1b0>
		{
			SET_BIT(PORTD,Copy_u8PinNumber);
    12cc:	a2 e3       	ldi	r26, 0x32	; 50
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8SetPinValue+0x1a6>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8SetPinValue+0x1a2>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 23       	and	r24, r24
    12f8:	a9 f4       	brne	.+42     	; 0x1324 <DIO_u8SetPinValue+0x1e0>
		{
			CLR_BIT(PORTD,Copy_u8PinNumber);
    12fa:	a2 e3       	ldi	r26, 0x32	; 50
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8SetPinValue+0x1d4>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8SetPinValue+0x1d0>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	03 c0       	rjmp	.+6      	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    1324:	19 82       	std	Y+1, r1	; 0x01
    1326:	01 c0       	rjmp	.+2      	; 0x132a <DIO_u8SetPinValue+0x1e6>
		}
		break;
	default:
		Error_State =NOK;
    1328:	19 82       	std	Y+1, r1	; 0x01
		break;

	}
	return Error_State;
    132a:	89 81       	ldd	r24, Y+1	; 0x01

}
    132c:	26 96       	adiw	r28, 0x06	; 6
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	 (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8* Copy_u8PinValue)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	28 97       	sbiw	r28, 0x08	; 8
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	6b 83       	std	Y+3, r22	; 0x03
    1356:	5d 83       	std	Y+5, r21	; 0x05
    1358:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinNumber < DIO_PIN0) || (Copy_u8PinNumber > DIO_PIN7))
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	10 f0       	brcs	.+4      	; 0x1368 <DIO_u8GetPinValue+0x2a>
	{
		return NOK;
    1364:	18 86       	std	Y+8, r1	; 0x08
    1366:	74 c0       	rjmp	.+232    	; 0x1450 <DIO_u8GetPinValue+0x112>
	}
	else
	{
		switch (Copy_u8PortNumber)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3f 83       	std	Y+7, r19	; 0x07
    1370:	2e 83       	std	Y+6, r18	; 0x06
    1372:	4e 81       	ldd	r20, Y+6	; 0x06
    1374:	5f 81       	ldd	r21, Y+7	; 0x07
    1376:	41 30       	cpi	r20, 0x01	; 1
    1378:	51 05       	cpc	r21, r1
    137a:	59 f1       	breq	.+86     	; 0x13d2 <DIO_u8GetPinValue+0x94>
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	9f 81       	ldd	r25, Y+7	; 0x07
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	91 05       	cpc	r25, r1
    1384:	34 f4       	brge	.+12     	; 0x1392 <DIO_u8GetPinValue+0x54>
    1386:	2e 81       	ldd	r18, Y+6	; 0x06
    1388:	3f 81       	ldd	r19, Y+7	; 0x07
    138a:	21 15       	cp	r18, r1
    138c:	31 05       	cpc	r19, r1
    138e:	69 f0       	breq	.+26     	; 0x13aa <DIO_u8GetPinValue+0x6c>
    1390:	5c c0       	rjmp	.+184    	; 0x144a <DIO_u8GetPinValue+0x10c>
    1392:	4e 81       	ldd	r20, Y+6	; 0x06
    1394:	5f 81       	ldd	r21, Y+7	; 0x07
    1396:	42 30       	cpi	r20, 0x02	; 2
    1398:	51 05       	cpc	r21, r1
    139a:	79 f1       	breq	.+94     	; 0x13fa <DIO_u8GetPinValue+0xbc>
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <DIO_u8GetPinValue+0x6a>
    13a6:	3d c0       	rjmp	.+122    	; 0x1422 <DIO_u8GetPinValue+0xe4>
    13a8:	50 c0       	rjmp	.+160    	; 0x144a <DIO_u8GetPinValue+0x10c>
		{
		case DIO_PORTA:

			*Copy_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    13aa:	eb e3       	ldi	r30, 0x3B	; 59
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_u8GetPinValue+0x84>
    13be:	55 95       	asr	r21
    13c0:	47 95       	ror	r20
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_u8GetPinValue+0x80>
    13c6:	ca 01       	movw	r24, r20
    13c8:	81 70       	andi	r24, 0x01	; 1
    13ca:	ec 81       	ldd	r30, Y+4	; 0x04
    13cc:	fd 81       	ldd	r31, Y+5	; 0x05
    13ce:	80 83       	st	Z, r24
    13d0:	3d c0       	rjmp	.+122    	; 0x144c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTB:
			*Copy_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xac>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xa8>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	ec 81       	ldd	r30, Y+4	; 0x04
    13f4:	fd 81       	ldd	r31, Y+5	; 0x05
    13f6:	80 83       	st	Z, r24
    13f8:	29 c0       	rjmp	.+82     	; 0x144c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTC:
			*Copy_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    13fa:	e5 e3       	ldi	r30, 0x35	; 53
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8GetPinValue+0xd4>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8GetPinValue+0xd0>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	ec 81       	ldd	r30, Y+4	; 0x04
    141c:	fd 81       	ldd	r31, Y+5	; 0x05
    141e:	80 83       	st	Z, r24
    1420:	15 c0       	rjmp	.+42     	; 0x144c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTD:
			*Copy_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    1422:	e2 e3       	ldi	r30, 0x32	; 50
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a9 01       	movw	r20, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_u8GetPinValue+0xfc>
    1436:	55 95       	asr	r21
    1438:	47 95       	ror	r20
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_u8GetPinValue+0xf8>
    143e:	ca 01       	movw	r24, r20
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	ec 81       	ldd	r30, Y+4	; 0x04
    1444:	fd 81       	ldd	r31, Y+5	; 0x05
    1446:	80 83       	st	Z, r24
    1448:	01 c0       	rjmp	.+2      	; 0x144c <DIO_u8GetPinValue+0x10e>
			break;
		default:
			Error_State =NOK;
    144a:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return Error_State;
    144c:	59 81       	ldd	r21, Y+1	; 0x01
    144e:	58 87       	std	Y+8, r21	; 0x08
    1450:	88 85       	ldd	r24, Y+8	; 0x08


}
    1452:	28 96       	adiw	r28, 0x08	; 8
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNumber , u8 Copy_u8PortDirection)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_u8SetPortDirection+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <DIO_u8SetPortDirection+0x8>
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01


		switch (Copy_u8PortNumber)
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3d 83       	std	Y+5, r19	; 0x05
    1482:	2c 83       	std	Y+4, r18	; 0x04
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	31 f1       	breq	.+76     	; 0x14da <DIO_u8SetPortDirection+0x76>
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	3d 81       	ldd	r19, Y+5	; 0x05
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	2c f4       	brge	.+10     	; 0x14a2 <DIO_u8SetPortDirection+0x3e>
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	61 f0       	breq	.+24     	; 0x14b8 <DIO_u8SetPortDirection+0x54>
    14a0:	4f c0       	rjmp	.+158    	; 0x1540 <DIO_u8SetPortDirection+0xdc>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	41 f1       	breq	.+80     	; 0x14fc <DIO_u8SetPortDirection+0x98>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	a1 f1       	breq	.+104    	; 0x151e <DIO_u8SetPortDirection+0xba>
    14b6:	44 c0       	rjmp	.+136    	; 0x1540 <DIO_u8SetPortDirection+0xdc>
		{
		case DIO_PORTA:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	8f 3f       	cpi	r24, 0xFF	; 255
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <DIO_u8SetPortDirection+0x64>
			{
				DDRA = PORT_OUTPUT;
    14be:	ea e3       	ldi	r30, 0x3A	; 58
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	80 83       	st	Z, r24
    14c6:	3d c0       	rjmp	.+122    	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	88 23       	and	r24, r24
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <DIO_u8SetPortDirection+0x72>
			{
				DDRA = PORT_INPUT;
    14ce:	ea e3       	ldi	r30, 0x3A	; 58
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	10 82       	st	Z, r1
    14d4:	36 c0       	rjmp	.+108    	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	34 c0       	rjmp	.+104    	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTB:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	8f 3f       	cpi	r24, 0xFF	; 255
    14de:	29 f4       	brne	.+10     	; 0x14ea <DIO_u8SetPortDirection+0x86>
			{
				DDRB = PORT_OUTPUT;
    14e0:	e7 e3       	ldi	r30, 0x37	; 55
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	80 83       	st	Z, r24
    14e8:	2c c0       	rjmp	.+88     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 23       	and	r24, r24
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <DIO_u8SetPortDirection+0x94>
			{
				DDRB = PORT_INPUT;
    14f0:	e7 e3       	ldi	r30, 0x37	; 55
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	10 82       	st	Z, r1
    14f6:	25 c0       	rjmp	.+74     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    14f8:	19 82       	std	Y+1, r1	; 0x01
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTC:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1500:	29 f4       	brne	.+10     	; 0x150c <DIO_u8SetPortDirection+0xa8>
			{
				DDRC = PORT_OUTPUT;
    1502:	e4 e3       	ldi	r30, 0x34	; 52
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	80 83       	st	Z, r24
    150a:	1b c0       	rjmp	.+54     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	21 f4       	brne	.+8      	; 0x151a <DIO_u8SetPortDirection+0xb6>
			{
				DDRC = PORT_INPUT;
    1512:	e4 e3       	ldi	r30, 0x34	; 52
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	10 82       	st	Z, r1
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    151a:	19 82       	std	Y+1, r1	; 0x01
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTD:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	29 f4       	brne	.+10     	; 0x152e <DIO_u8SetPortDirection+0xca>
			{
				DDRD = PORT_OUTPUT;
    1524:	e1 e3       	ldi	r30, 0x31	; 49
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 23       	and	r24, r24
    1532:	21 f4       	brne	.+8      	; 0x153c <DIO_u8SetPortDirection+0xd8>
			{
				DDRD = PORT_INPUT;
    1534:	e1 e3       	ldi	r30, 0x31	; 49
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <DIO_u8SetPortDirection+0xde>
			}
			break;
		default:
			Error_State =NOK;
    1540:	19 82       	std	Y+1, r1	; 0x01
		}




	return Error_State;
    1542:	89 81       	ldd	r24, Y+1	; 0x01


}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue	 (u8 Copy_u8PortNumber , u8 Copy_u8PortValue)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_u8SetPortValue+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <DIO_u8SetPortValue+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01


		switch (Copy_u8PortNumber)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3d 83       	std	Y+5, r19	; 0x05
    1572:	2c 83       	std	Y+4, r18	; 0x04
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	31 f1       	breq	.+76     	; 0x15ca <DIO_u8SetPortValue+0x76>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <DIO_u8SetPortValue+0x3e>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <DIO_u8SetPortValue+0x54>
    1590:	4f c0       	rjmp	.+158    	; 0x1630 <DIO_u8SetPortValue+0xdc>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	41 f1       	breq	.+80     	; 0x15ec <DIO_u8SetPortValue+0x98>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	a1 f1       	breq	.+104    	; 0x160e <DIO_u8SetPortValue+0xba>
    15a6:	44 c0       	rjmp	.+136    	; 0x1630 <DIO_u8SetPortValue+0xdc>
		{
		case DIO_PORTA:
			if(Copy_u8PortValue==PORT_HIGH)
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	29 f4       	brne	.+10     	; 0x15b8 <DIO_u8SetPortValue+0x64>
			{
				PORTA = PORT_HIGH;
    15ae:	eb e3       	ldi	r30, 0x3B	; 59
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 83       	st	Z, r24
    15b6:	3d c0       	rjmp	.+122    	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 23       	and	r24, r24
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <DIO_u8SetPortValue+0x72>
			{
				PORTA = PORT_LOW;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	10 82       	st	Z, r1
    15c4:	36 c0       	rjmp	.+108    	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	34 c0       	rjmp	.+104    	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTB:
			if(Copy_u8PortValue==PORT_HIGH)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	29 f4       	brne	.+10     	; 0x15da <DIO_u8SetPortValue+0x86>
			{
				PORTB = PORT_HIGH;
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 83       	st	Z, r24
    15d8:	2c c0       	rjmp	.+88     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 23       	and	r24, r24
    15de:	21 f4       	brne	.+8      	; 0x15e8 <DIO_u8SetPortValue+0x94>
			{
				PORTB = PORT_LOW;
    15e0:	e8 e3       	ldi	r30, 0x38	; 56
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	10 82       	st	Z, r1
    15e6:	25 c0       	rjmp	.+74     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    15e8:	19 82       	std	Y+1, r1	; 0x01
    15ea:	23 c0       	rjmp	.+70     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTC:
			if(Copy_u8PortValue==PORT_HIGH)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	29 f4       	brne	.+10     	; 0x15fc <DIO_u8SetPortValue+0xa8>
			{
				PORTC = PORT_HIGH;
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 83       	st	Z, r24
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 23       	and	r24, r24
    1600:	21 f4       	brne	.+8      	; 0x160a <DIO_u8SetPortValue+0xb6>
			{
				PORTC = PORT_LOW;
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	10 82       	st	Z, r1
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	12 c0       	rjmp	.+36     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTD:
			if(Copy_u8PortValue==PORT_HIGH)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	29 f4       	brne	.+10     	; 0x161e <DIO_u8SetPortValue+0xca>
			{
				PORTD = PORT_HIGH;
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 83       	st	Z, r24
    161c:	0a c0       	rjmp	.+20     	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 23       	and	r24, r24
    1622:	21 f4       	brne	.+8      	; 0x162c <DIO_u8SetPortValue+0xd8>
			{
				PORTD = PORT_LOW;
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	10 82       	st	Z, r1
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <DIO_u8SetPortValue+0xde>
			}
			break;
		default:
			Error_State =NOK;
    1630:	19 82       	std	Y+1, r1	; 0x01
		}




	return Error_State;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <EEPROM_voidWrite_Data>:
#include"GIE_Private.h"
#include"EEPROM_Private.h"


void EEPROM_voidWrite_Data(u8 Copy_Location_Address, u8 Copy_u8Data)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	61 97       	sbiw	r28, 0x11	; 17
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	88 8b       	std	Y+16, r24	; 0x10
    165a:	69 8b       	std	Y+17, r22	; 0x11
		u8 flag = 0;
    165c:	1f 86       	std	Y+15, r1	; 0x0f

		//Address initiation
		EEARL = Copy_Location_Address;
    165e:	ee e3       	ldi	r30, 0x3E	; 62
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	88 89       	ldd	r24, Y+16	; 0x10
    1664:	80 83       	st	Z, r24
		//EEARH = (Copy_Location_Address>>8);

		//Fill Data
		EEDR = Copy_u8Data;
    1666:	ed e3       	ldi	r30, 0x3D	; 61
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	89 89       	ldd	r24, Y+17	; 0x11
    166c:	80 83       	st	Z, r24

		// Disable Interrupt
		if(((SREG&(1<<7))>>7)==1){
    166e:	ef e5       	ldi	r30, 0x5F	; 95
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 1f       	adc	r24, r24
    1676:	88 27       	eor	r24, r24
    1678:	88 1f       	adc	r24, r24
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	90 70       	andi	r25, 0x00	; 0
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	49 f4       	brne	.+18     	; 0x1698 <EEPROM_voidWrite_Data+0x54>
			flag = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	8f 87       	std	Y+15, r24	; 0x0f
			CLR_BIT(SREG,7);
    168a:	af e5       	ldi	r26, 0x5F	; 95
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ef e5       	ldi	r30, 0x5F	; 95
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8f 77       	andi	r24, 0x7F	; 127
    1696:	8c 93       	st	X, r24
			}

		//Write Operation
		SET_BIT(EECR,2);
    1698:	ac e3       	ldi	r26, 0x3C	; 60
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ec e3       	ldi	r30, 0x3C	; 60
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24
		SET_BIT(EECR,1);
    16a6:	ac e3       	ldi	r26, 0x3C	; 60
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ec e3       	ldi	r30, 0x3C	; 60
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	82 60       	ori	r24, 0x02	; 2
    16b2:	8c 93       	st	X, r24

		//Enable Interrupt
		if (flag==1)
    16b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	39 f4       	brne	.+14     	; 0x16c8 <EEPROM_voidWrite_Data+0x84>
			{
				SET_BIT(SREG,7);
    16ba:	af e5       	ldi	r26, 0x5F	; 95
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e5       	ldi	r30, 0x5F	; 95
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 68       	ori	r24, 0x80	; 128
    16c6:	8c 93       	st	X, r24
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e2       	ldi	r26, 0x20	; 32
    16ce:	b1 e4       	ldi	r27, 0x41	; 65
    16d0:	8b 87       	std	Y+11, r24	; 0x0b
    16d2:	9c 87       	std	Y+12, r25	; 0x0c
    16d4:	ad 87       	std	Y+13, r26	; 0x0d
    16d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16da:	7c 85       	ldd	r23, Y+12	; 0x0c
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8f 83       	std	Y+7, r24	; 0x07
    16f2:	98 87       	std	Y+8, r25	; 0x08
    16f4:	a9 87       	std	Y+9, r26	; 0x09
    16f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <EEPROM_voidWrite_Data+0xd6>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9e 83       	std	Y+6, r25	; 0x06
    1716:	8d 83       	std	Y+5, r24	; 0x05
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <EEPROM_voidWrite_Data+0x154>
	else if (__tmp > 65535)
    171a:	6f 81       	ldd	r22, Y+7	; 0x07
    171c:	78 85       	ldd	r23, Y+8	; 0x08
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	9a 85       	ldd	r25, Y+10	; 0x0a
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <EEPROM_voidWrite_Data+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	6b 85       	ldd	r22, Y+11	; 0x0b
    1734:	7c 85       	ldd	r23, Y+12	; 0x0c
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	9e 85       	ldd	r25, Y+14	; 0x0e
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	0f c0       	rjmp	.+30     	; 0x177a <EEPROM_voidWrite_Data+0x136>
    175c:	89 e1       	ldi	r24, 0x19	; 25
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <EEPROM_voidWrite_Data+0x124>
    176c:	9c 83       	std	Y+4, r25	; 0x04
    176e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <EEPROM_voidWrite_Data+0x118>
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <EEPROM_voidWrite_Data+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <EEPROM_voidWrite_Data+0x160>
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
			}
		//Delay until the write cycle is finished
		_delay_ms(10);
}
    17ac:	61 96       	adiw	r28, 0x11	; 17
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <EEPROM_voidRead_Data>:


u8 EEPROM_voidRead_Data(u8 Copy_Location_Address)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
	EEARL = Copy_Location_Address;
    17ca:	ee e3       	ldi	r30, 0x3E	; 62
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	80 83       	st	Z, r24
	//EEARH = (Copy_Location_Address>>8);

	//Enable Read Operation
	SET_BIT(EECR,0);
    17d2:	ac e3       	ldi	r26, 0x3C	; 60
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ec e3       	ldi	r30, 0x3C	; 60
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	8c 93       	st	X, r24

	return EEDR;
    17e0:	ed e3       	ldi	r30, 0x3D	; 61
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
}
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <EXTI_voidINT0_Init>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"EXTI_Private.h"

void EXTI_voidINT0_Init(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR,1);
    17f6:	a5 e5       	ldi	r26, 0x55	; 85
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e5 e5       	ldi	r30, 0x55	; 85
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	8c 93       	st	X, r24

	CLR_BIT(MCUCR,0);
    1804:	a5 e5       	ldi	r26, 0x55	; 85
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e5       	ldi	r30, 0x55	; 85
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8e 7f       	andi	r24, 0xFE	; 254
    1810:	8c 93       	st	X, r24

	SET_BIT(GICR,6);
    1812:	ab e5       	ldi	r26, 0x5B	; 91
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e5       	ldi	r30, 0x5B	; 91
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 64       	ori	r24, 0x40	; 64
    181e:	8c 93       	st	X, r24
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <EXTI_voidINT1_Init>:
void EXTI_voidINT1_Init(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR,2);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	8c 93       	st	X, r24

	SET_BIT(MCUCR,3);
    183c:	a5 e5       	ldi	r26, 0x55	; 85
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e5       	ldi	r30, 0x55	; 85
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	8c 93       	st	X, r24

	SET_BIT(GICR,7);
    184a:	ab e5       	ldi	r26, 0x5B	; 91
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e5       	ldi	r30, 0x5B	; 91
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 68       	ori	r24, 0x80	; 128
    1856:	8c 93       	st	X, r24

}
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <EXTI_voidINT2_Init>:
void EXTI_voidINT2_Init(void)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCSR,6);
    1866:	a4 e5       	ldi	r26, 0x54	; 84
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e4 e5       	ldi	r30, 0x54	; 84
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	8c 93       	st	X, r24

	SET_BIT(GICR,5);
    1874:	ab e5       	ldi	r26, 0x5B	; 91
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e5       	ldi	r30, 0x5B	; 91
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 62       	ori	r24, 0x20	; 32
    1880:	8c 93       	st	X, r24
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <GIE_voidEnable>:
#include"BIT_MATH.h"
#include"GIE_Private.h"


void GIE_voidEnable(void)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7);
    1890:	af e5       	ldi	r26, 0x5F	; 95
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ef e5       	ldi	r30, 0x5F	; 95
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 68       	ori	r24, 0x80	; 128
    189c:	8c 93       	st	X, r24
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
    18ac:	af e5       	ldi	r26, 0x5F	; 95
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ef e5       	ldi	r30, 0x5F	; 95
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 77       	andi	r24, 0x7F	; 127
    18b8:	8c 93       	st	X, r24
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <led_voidInit>:
#include"BIT_MATH.h"
#include"LED_Private.h"
#include"LED_Interface.h"


void led_voidInit(void){
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62

	// PIN 0 in the port is an output pin
	// the LED pin is initially off

	SET_BIT(DDRB,LED_PIN);
    18c8:	a7 e3       	ldi	r26, 0x37	; 55
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e7 e3       	ldi	r30, 0x37	; 55
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	8c 93       	st	X, r24
	CLR_BIT(PORTB,LED_PIN);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8e 7f       	andi	r24, 0xFE	; 254
    18e2:	8c 93       	st	X, r24

}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <led_voidOn>:

void led_voidOn(void){
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB,LED_PIN);
    18f2:	a8 e3       	ldi	r26, 0x38	; 56
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	81 60       	ori	r24, 0x01	; 1
    18fe:	8c 93       	st	X, r24
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <led_voidOff>:

void led_voidOff(void){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTB,LED_PIN);
    190e:	a8 e3       	ldi	r26, 0x38	; 56
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e3       	ldi	r30, 0x38	; 56
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8e 7f       	andi	r24, 0xFE	; 254
    191a:	8c 93       	st	X, r24
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <SevenSegment_voidInit>:
#include"BIT_MATH.h"
#include"SevenSegments_Private.h"
#include"SevenSegment_Interface.h"
#include<util/delay.h>

void SevenSegment_voidInit(void){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62

	DISPLAY_PORT_DIR  = 0xff;
    192a:	e1 e3       	ldi	r30, 0x31	; 49
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	80 83       	st	Z, r24
	SET_BIT(ENABLE_DISPLAY_DIR,DISPLAY1_ENABLE_PIN);
    1932:	a7 e3       	ldi	r26, 0x37	; 55
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e3       	ldi	r30, 0x37	; 55
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 64       	ori	r24, 0x40	; 64
    193e:	8c 93       	st	X, r24
	SET_BIT(ENABLE_DISPLAY_DIR,DISPLAY2_ENABLE_PIN);
    1940:	a7 e3       	ldi	r26, 0x37	; 55
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e7 e3       	ldi	r30, 0x37	; 55
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	80 68       	ori	r24, 0x80	; 128
    194c:	8c 93       	st	X, r24

	// Seven Segment initially OFF
	SevenSegment_disable();
    194e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <SevenSegment_disable>
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <SevenSegment_send>:

void SevenSegment_send(u16 Copy_u16Number)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <SevenSegment_send+0x6>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	DISPLAY_DATA  = arr[Copy_u16Number];
    1966:	a2 e3       	ldi	r26, 0x32	; 50
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	e8 59       	subi	r30, 0x98	; 152
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	8c 93       	st	X, r24
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <SevenSegment_enable>:

void SevenSegment_enable(u8 en)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	0f 92       	push	r0
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	89 83       	std	Y+1, r24	; 0x01
	if(en ==1)
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	79 f4       	brne	.+30     	; 0x19b2 <SevenSegment_enable+0x30>
	{
		SET_BIT(ENABLE_DISPLAY_PORT,DISPLAY1_ENABLE_PIN);
    1994:	a8 e3       	ldi	r26, 0x38	; 56
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e8 e3       	ldi	r30, 0x38	; 56
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 64       	ori	r24, 0x40	; 64
    19a0:	8c 93       	st	X, r24
		CLR_BIT(ENABLE_DISPLAY_PORT,DISPLAY2_ENABLE_PIN);
    19a2:	a8 e3       	ldi	r26, 0x38	; 56
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e8 e3       	ldi	r30, 0x38	; 56
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 77       	andi	r24, 0x7F	; 127
    19ae:	8c 93       	st	X, r24
    19b0:	11 c0       	rjmp	.+34     	; 0x19d4 <SevenSegment_enable+0x52>
	}
	else if(en==2)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	71 f4       	brne	.+28     	; 0x19d4 <SevenSegment_enable+0x52>
	{
		SET_BIT(ENABLE_DISPLAY_PORT,DISPLAY2_ENABLE_PIN);
    19b8:	a8 e3       	ldi	r26, 0x38	; 56
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 e3       	ldi	r30, 0x38	; 56
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 68       	ori	r24, 0x80	; 128
    19c4:	8c 93       	st	X, r24
		CLR_BIT(ENABLE_DISPLAY_PORT,DISPLAY1_ENABLE_PIN);
    19c6:	a8 e3       	ldi	r26, 0x38	; 56
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e8 e3       	ldi	r30, 0x38	; 56
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7b       	andi	r24, 0xBF	; 191
    19d2:	8c 93       	st	X, r24
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <SevenSegment_disable>:

void SevenSegment_disable(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ENABLE_DISPLAY_PORT,DISPLAY1_ENABLE_PIN);
    19e4:	a8 e3       	ldi	r26, 0x38	; 56
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 e3       	ldi	r30, 0x38	; 56
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8f 7b       	andi	r24, 0xBF	; 191
    19f0:	8c 93       	st	X, r24
	CLR_BIT(ENABLE_DISPLAY_PORT,DISPLAY2_ENABLE_PIN);
    19f2:	a8 e3       	ldi	r26, 0x38	; 56
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e8 e3       	ldi	r30, 0x38	; 56
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8f 77       	andi	r24, 0x7F	; 127
    19fe:	8c 93       	st	X, r24
}
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <SevenSegment_turn_off>:

void SevenSegment_turn_off(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62

}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <SevenSegment_write>:

void SevenSegment_write(u16 Copy_u16Number)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	a0 97       	sbiw	r28, 0x20	; 32
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 right;
	u8 left;

	right = Copy_u16Number%10;
    1a2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a30:	2a e0       	ldi	r18, 0x0A	; 10
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__udivmodhi4>
    1a3a:	8e 8f       	std	Y+30, r24	; 0x1e
	left = (int)Copy_u16Number/10;
    1a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	b9 01       	movw	r22, r18
    1a46:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__divmodhi4>
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8d 8f       	std	Y+29, r24	; 0x1d

	SevenSegment_enable(DISPLAY1);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	0e 94 c1 0c 	call	0x1982	; 0x1982 <SevenSegment_enable>
	SevenSegment_send(right);
    1a54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <SevenSegment_send>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 ea       	ldi	r26, 0xA0	; 160
    1a64:	b0 e4       	ldi	r27, 0x40	; 64
    1a66:	89 8f       	std	Y+25, r24	; 0x19
    1a68:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a e7       	ldi	r20, 0x7A	; 122
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8d 8b       	std	Y+21, r24	; 0x15
    1a88:	9e 8b       	std	Y+22, r25	; 0x16
    1a8a:	af 8b       	std	Y+23, r26	; 0x17
    1a8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a90:	7e 89       	ldd	r23, Y+22	; 0x16
    1a92:	8f 89       	ldd	r24, Y+23	; 0x17
    1a94:	98 8d       	ldd	r25, Y+24	; 0x18
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <SevenSegment_write+0x9c>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9c 8b       	std	Y+20, r25	; 0x14
    1aac:	8b 8b       	std	Y+19, r24	; 0x13
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <SevenSegment_write+0x11a>
	else if (__tmp > 65535)
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <SevenSegment_write+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <SevenSegment_write+0xfc>
    1af2:	89 e1       	ldi	r24, 0x19	; 25
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9a 8b       	std	Y+18, r25	; 0x12
    1af8:	89 8b       	std	Y+17, r24	; 0x11
    1afa:	89 89       	ldd	r24, Y+17	; 0x11
    1afc:	9a 89       	ldd	r25, Y+18	; 0x12
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <SevenSegment_write+0xea>
    1b02:	9a 8b       	std	Y+18, r25	; 0x12
    1b04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	8b 89       	ldd	r24, Y+19	; 0x13
    1b08:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	9c 8b       	std	Y+20, r25	; 0x14
    1b0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	8b 89       	ldd	r24, Y+19	; 0x13
    1b12:	9c 89       	ldd	r25, Y+20	; 0x14
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <SevenSegment_write+0xde>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <SevenSegment_write+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	98 8d       	ldd	r25, Y+24	; 0x18
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9c 8b       	std	Y+20, r25	; 0x14
    1b2c:	8b 8b       	std	Y+19, r24	; 0x13
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	98 8b       	std	Y+16, r25	; 0x10
    1b34:	8f 87       	std	Y+15, r24	; 0x0f
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	98 89       	ldd	r25, Y+16	; 0x10
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <SevenSegment_write+0x126>
    1b3e:	98 8b       	std	Y+16, r25	; 0x10
    1b40:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(5);
	SevenSegment_enable(DISPLAY2);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 c1 0c 	call	0x1982	; 0x1982 <SevenSegment_enable>
	SevenSegment_send(left);
    1b48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <SevenSegment_send>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 ea       	ldi	r26, 0xA0	; 160
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	53 e4       	ldi	r21, 0x43	; 67
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <SevenSegment_write+0x190>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <SevenSegment_write+0x20e>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <SevenSegment_write+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <SevenSegment_write+0x1f0>
    1be6:	89 e1       	ldi	r24, 0x19	; 25
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <SevenSegment_write+0x1de>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <SevenSegment_write+0x1d2>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <SevenSegment_write+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <SevenSegment_write+0x21a>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    1c36:	a0 96       	adiw	r28, 0x20	; 32
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <system_voidInit>:
#include "Timer_Interface.h"



void system_voidInit(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    1c50:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	Buttons_voidInit();
    1c54:	0e 94 16 06 	call	0xc2c	; 0xc2c <Buttons_voidInit>
	cool_voidInit();
    1c58:	0e 94 6f 07 	call	0xede	; 0xede <cool_voidInit>
	heat_voidInit();
    1c5c:	0e 94 4b 07 	call	0xe96	; 0xe96 <heat_voidInit>
	led_voidInit();
    1c60:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <led_voidInit>
	SevenSegment_voidInit();
    1c64:	0e 94 91 0c 	call	0x1922	; 0x1922 <SevenSegment_voidInit>
	TIMER0_voidInit();
    1c68:	0e 94 12 10 	call	0x2024	; 0x2024 <TIMER0_voidInit>
	TIMER2_voidInit();
    1c6c:	0e 94 5f 10 	call	0x20be	; 0x20be <TIMER2_voidInit>


	state = OFF;
    1c70:	10 92 79 00 	sts	0x0079, r1

	if(EEPROM_voidRead_Data(0x0000) != 0xFF)
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_voidRead_Data>
    1c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c7c:	51 f0       	breq	.+20     	; 0x1c92 <system_voidInit+0x4a>
	{
			target_temp = EEPROM_voidRead_Data(0x0000);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_voidRead_Data>
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	90 93 76 00 	sts	0x0076, r25
    1c8c:	80 93 75 00 	sts	0x0075, r24
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <system_voidInit+0x56>
	}
	else
	{
			target_temp = INIT_TEMP;
    1c92:	8c e3       	ldi	r24, 0x3C	; 60
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	90 93 76 00 	sts	0x0076, r25
    1c9a:	80 93 75 00 	sts	0x0075, r24
	}

	temp_arr_voidInit();
    1c9e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <temp_arr_voidInit>


	EEPROM_voidWrite_Data(0x0000,target_temp);
    1ca2:	80 91 75 00 	lds	r24, 0x0075
    1ca6:	90 91 76 00 	lds	r25, 0x0076
    1caa:	98 2f       	mov	r25, r24
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	69 2f       	mov	r22, r25
    1cb0:	0e 94 22 0b 	call	0x1644	; 0x1644 <EEPROM_voidWrite_Data>
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <on_voidState>:

void on_voidState(void)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(sensor_flag == 1)
    1cc2:	80 91 7f 00 	lds	r24, 0x007F
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	01 f5       	brne	.+64     	; 0x1d0a <on_voidState+0x50>
	{
		current_temp = (ADC_u16StartConversion(1)/10);
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u16StartConversion>
    1cd0:	2a e0       	ldi	r18, 0x0A	; 10
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__udivmodhi4>
    1cda:	cb 01       	movw	r24, r22
    1cdc:	90 93 7b 00 	sts	0x007B, r25
    1ce0:	80 93 7a 00 	sts	0x007A, r24
		add_voidNew_Temp(temp_arr, current_temp);
    1ce4:	20 91 7a 00 	lds	r18, 0x007A
    1ce8:	30 91 7b 00 	lds	r19, 0x007B
    1cec:	80 e8       	ldi	r24, 0x80	; 128
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <add_voidNew_Temp>
		avg_temp = calc_u16Avg_Temp(temp_arr);
    1cf6:	80 e8       	ldi	r24, 0x80	; 128
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <calc_u16Avg_Temp>
    1cfe:	90 93 7d 00 	sts	0x007D, r25
    1d02:	80 93 7c 00 	sts	0x007C, r24
		sensor_flag = 0;
    1d06:	10 92 7f 00 	sts	0x007F, r1
	}

	SevenSegment_write(current_temp);
    1d0a:	80 91 7a 00 	lds	r24, 0x007A
    1d0e:	90 91 7b 00 	lds	r25, 0x007B
    1d12:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SevenSegment_write>

	change_voidTemp();
    1d16:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <change_voidTemp>
	if(UP_button() == PUSHED || down_button() == PUSHED)
    1d1a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UP_button>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <on_voidState+0x70>
    1d22:	0e 94 c5 06 	call	0xd8a	; 0xd8a <down_button>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	39 f4       	brne	.+14     	; 0x1d38 <on_voidState+0x7e>
	{
		SevenSegment_disable();
    1d2a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <SevenSegment_disable>
		setting_counter = 0;
    1d2e:	10 92 74 00 	sts	0x0074, r1
		state = SETTING;
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	80 93 79 00 	sts	0x0079, r24
	}
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <off_voidState>:

void off_voidState(void)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	SevenSegment_turn_off();
    1d46:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <SevenSegment_turn_off>
	led_voidOff();
    1d4a:	0e 94 83 0c 	call	0x1906	; 0x1906 <led_voidOff>
	heat_Stop();
    1d4e:	0e 94 63 07 	call	0xec6	; 0xec6 <heat_Stop>
	cool_Stop();
    1d52:	0e 94 87 07 	call	0xf0e	; 0xf0e <cool_Stop>

}
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <set_voidState>:

void set_voidState(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	heat_Stop();
    1d64:	0e 94 63 07 	call	0xec6	; 0xec6 <heat_Stop>
	cool_Stop();
    1d68:	0e 94 87 07 	call	0xf0e	; 0xf0e <cool_Stop>
	led_voidOff();
    1d6c:	0e 94 83 0c 	call	0x1906	; 0x1906 <led_voidOff>

	if(toggle_f == 1){
    1d70:	80 91 77 00 	lds	r24, 0x0077
    1d74:	90 91 78 00 	lds	r25, 0x0078
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	39 f4       	brne	.+14     	; 0x1d8c <set_voidState+0x30>
			SevenSegment_write(target_temp);
    1d7e:	80 91 75 00 	lds	r24, 0x0075
    1d82:	90 91 76 00 	lds	r25, 0x0076
    1d86:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SevenSegment_write>
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <set_voidState+0x34>
		}
		else{
			SevenSegment_turn_off();
    1d8c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <SevenSegment_turn_off>
		}

	if((UP_button() == PUSHED) && (target_temp < MAX_TEMP)){
    1d90:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UP_button>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	c9 f4       	brne	.+50     	; 0x1dca <set_voidState+0x6e>
    1d98:	80 91 75 00 	lds	r24, 0x0075
    1d9c:	90 91 76 00 	lds	r25, 0x0076
    1da0:	8b 34       	cpi	r24, 0x4B	; 75
    1da2:	91 05       	cpc	r25, r1
    1da4:	90 f4       	brcc	.+36     	; 0x1dca <set_voidState+0x6e>
			current_temp += 5;
    1da6:	80 91 7a 00 	lds	r24, 0x007A
    1daa:	90 91 7b 00 	lds	r25, 0x007B
    1dae:	05 96       	adiw	r24, 0x05	; 5
    1db0:	90 93 7b 00 	sts	0x007B, r25
    1db4:	80 93 7a 00 	sts	0x007A, r24
			setting_counter = 0;
    1db8:	10 92 74 00 	sts	0x0074, r1
			SevenSegment_write(target_temp);
    1dbc:	80 91 75 00 	lds	r24, 0x0075
    1dc0:	90 91 76 00 	lds	r25, 0x0076
    1dc4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SevenSegment_write>
    1dc8:	1c c0       	rjmp	.+56     	; 0x1e02 <set_voidState+0xa6>
		}
	else if ((down_button() == PUSHED) && (target_temp > MIN_TEMP)){
    1dca:	0e 94 c5 06 	call	0xd8a	; 0xd8a <down_button>
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	c1 f4       	brne	.+48     	; 0x1e02 <set_voidState+0xa6>
    1dd2:	80 91 75 00 	lds	r24, 0x0075
    1dd6:	90 91 76 00 	lds	r25, 0x0076
    1dda:	84 32       	cpi	r24, 0x24	; 36
    1ddc:	91 05       	cpc	r25, r1
    1dde:	88 f0       	brcs	.+34     	; 0x1e02 <set_voidState+0xa6>
			current_temp -= 5;
    1de0:	80 91 7a 00 	lds	r24, 0x007A
    1de4:	90 91 7b 00 	lds	r25, 0x007B
    1de8:	05 97       	sbiw	r24, 0x05	; 5
    1dea:	90 93 7b 00 	sts	0x007B, r25
    1dee:	80 93 7a 00 	sts	0x007A, r24
			setting_counter = 0;
    1df2:	10 92 74 00 	sts	0x0074, r1
			SevenSegment_write(target_temp);
    1df6:	80 91 75 00 	lds	r24, 0x0075
    1dfa:	90 91 76 00 	lds	r25, 0x0076
    1dfe:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SevenSegment_write>
		}
	EEPROM_voidWrite_Data(0x0000,target_temp);
    1e02:	80 91 75 00 	lds	r24, 0x0075
    1e06:	90 91 76 00 	lds	r25, 0x0076
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	69 2f       	mov	r22, r25
    1e10:	0e 94 22 0b 	call	0x1644	; 0x1644 <EEPROM_voidWrite_Data>
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <change_voidTemp>:

void change_voidTemp(void)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	if( (target_temp < avg_temp + TEMP_CHANGE) && (target_temp > avg_temp - TEMP_CHANGE) )
    1e22:	80 91 7c 00 	lds	r24, 0x007C
    1e26:	90 91 7d 00 	lds	r25, 0x007D
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	2b 5f       	subi	r18, 0xFB	; 251
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	80 91 75 00 	lds	r24, 0x0075
    1e34:	90 91 76 00 	lds	r25, 0x0076
    1e38:	82 17       	cp	r24, r18
    1e3a:	93 07       	cpc	r25, r19
    1e3c:	a8 f4       	brcc	.+42     	; 0x1e68 <change_voidTemp+0x4e>
    1e3e:	80 91 7c 00 	lds	r24, 0x007C
    1e42:	90 91 7d 00 	lds	r25, 0x007D
    1e46:	9c 01       	movw	r18, r24
    1e48:	25 50       	subi	r18, 0x05	; 5
    1e4a:	30 40       	sbci	r19, 0x00	; 0
    1e4c:	80 91 75 00 	lds	r24, 0x0075
    1e50:	90 91 76 00 	lds	r25, 0x0076
    1e54:	28 17       	cp	r18, r24
    1e56:	39 07       	cpc	r19, r25
    1e58:	38 f4       	brcc	.+14     	; 0x1e68 <change_voidTemp+0x4e>
	{

			heat_Stop();
    1e5a:	0e 94 63 07 	call	0xec6	; 0xec6 <heat_Stop>
			cool_Stop();
    1e5e:	0e 94 87 07 	call	0xf0e	; 0xf0e <cool_Stop>
			led_voidOff();
    1e62:	0e 94 83 0c 	call	0x1906	; 0x1906 <led_voidOff>
    1e66:	33 c0       	rjmp	.+102    	; 0x1ece <change_voidTemp+0xb4>
		}
		else if(target_temp < avg_temp + TEMP_CHANGE){
    1e68:	80 91 7c 00 	lds	r24, 0x007C
    1e6c:	90 91 7d 00 	lds	r25, 0x007D
    1e70:	9c 01       	movw	r18, r24
    1e72:	2b 5f       	subi	r18, 0xFB	; 251
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	80 91 75 00 	lds	r24, 0x0075
    1e7a:	90 91 76 00 	lds	r25, 0x0076
    1e7e:	82 17       	cp	r24, r18
    1e80:	93 07       	cpc	r25, r19
    1e82:	38 f4       	brcc	.+14     	; 0x1e92 <change_voidTemp+0x78>

			heat_Stop();
    1e84:	0e 94 63 07 	call	0xec6	; 0xec6 <heat_Stop>
			cool_Start();
    1e88:	0e 94 7b 07 	call	0xef6	; 0xef6 <cool_Start>
			led_voidOn();
    1e8c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <led_voidOn>
    1e90:	1e c0       	rjmp	.+60     	; 0x1ece <change_voidTemp+0xb4>
		}
		else if (target_temp > avg_temp - TEMP_CHANGE)
    1e92:	80 91 7c 00 	lds	r24, 0x007C
    1e96:	90 91 7d 00 	lds	r25, 0x007D
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	25 50       	subi	r18, 0x05	; 5
    1e9e:	30 40       	sbci	r19, 0x00	; 0
    1ea0:	80 91 75 00 	lds	r24, 0x0075
    1ea4:	90 91 76 00 	lds	r25, 0x0076
    1ea8:	28 17       	cp	r18, r24
    1eaa:	39 07       	cpc	r19, r25
    1eac:	80 f4       	brcc	.+32     	; 0x1ece <change_voidTemp+0xb4>
		{

			heat_Start();
    1eae:	0e 94 57 07 	call	0xeae	; 0xeae <heat_Start>
			cool_Stop();
    1eb2:	0e 94 87 07 	call	0xf0e	; 0xf0e <cool_Stop>
			if (toggle_f == 1)
    1eb6:	80 91 77 00 	lds	r24, 0x0077
    1eba:	90 91 78 00 	lds	r25, 0x0078
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	19 f4       	brne	.+6      	; 0x1eca <change_voidTemp+0xb0>
			{
				led_voidOn();
    1ec4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <led_voidOn>
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <change_voidTemp+0xb4>
			}
			else {
				led_voidOff();
    1eca:	0e 94 83 0c 	call	0x1906	; 0x1906 <led_voidOff>
			}
		}
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <add_voidNew_Temp>:

void add_voidNew_Temp(u16 * arr , u16 new_val)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <add_voidNew_Temp+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <add_voidNew_Temp+0x8>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	7c 83       	std	Y+4, r23	; 0x04
    1ee6:	6b 83       	std	Y+3, r22	; 0x03
	arr[arr_counter] = new_val;
    1ee8:	80 91 73 00 	lds	r24, 0x0073
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	fc 01       	movw	r30, r24
    1efc:	e2 0f       	add	r30, r18
    1efe:	f3 1f       	adc	r31, r19
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
		arr_counter++;
    1f08:	80 91 73 00 	lds	r24, 0x0073
    1f0c:	8f 5f       	subi	r24, 0xFF	; 255
    1f0e:	80 93 73 00 	sts	0x0073, r24

		if (arr_counter == 10){
    1f12:	80 91 73 00 	lds	r24, 0x0073
    1f16:	8a 30       	cpi	r24, 0x0A	; 10
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <add_voidNew_Temp+0x4a>
			arr_counter = 0;
    1f1a:	10 92 73 00 	sts	0x0073, r1
		}
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <calc_u16Avg_Temp>:

u16 calc_u16Avg_Temp(u16 * arr)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	27 97       	sbiw	r28, 0x07	; 7
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	9f 83       	std	Y+7, r25	; 0x07
    1f42:	8e 83       	std	Y+6, r24	; 0x06
	u16 sum =0;
    1f44:	1d 82       	std	Y+5, r1	; 0x05
    1f46:	1c 82       	std	Y+4, r1	; 0x04
	u16 avg = 0;
    1f48:	1b 82       	std	Y+3, r1	; 0x03
    1f4a:	1a 82       	std	Y+2, r1	; 0x02

	for(u8 i =0; i<TEMP_MEASURES;i++)
    1f4c:	19 82       	std	Y+1, r1	; 0x01
    1f4e:	16 c0       	rjmp	.+44     	; 0x1f7c <calc_u16Avg_Temp+0x50>
	{
		sum+=arr[i];
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9c 01       	movw	r18, r24
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	fc 01       	movw	r30, r24
    1f62:	e2 0f       	add	r30, r18
    1f64:	f3 1f       	adc	r31, r19
    1f66:	20 81       	ld	r18, Z
    1f68:	31 81       	ldd	r19, Z+1	; 0x01
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	82 0f       	add	r24, r18
    1f70:	93 1f       	adc	r25, r19
    1f72:	9d 83       	std	Y+5, r25	; 0x05
    1f74:	8c 83       	std	Y+4, r24	; 0x04
u16 calc_u16Avg_Temp(u16 * arr)
{
	u16 sum =0;
	u16 avg = 0;

	for(u8 i =0; i<TEMP_MEASURES;i++)
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8a 30       	cpi	r24, 0x0A	; 10
    1f80:	38 f3       	brcs	.-50     	; 0x1f50 <calc_u16Avg_Temp+0x24>
	{
		sum+=arr[i];
	}

	avg = sum/TEMP_MEASURES;
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	b9 01       	movw	r22, r18
    1f8c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__udivmodhi4>
    1f90:	cb 01       	movw	r24, r22
    1f92:	9b 83       	std	Y+3, r25	; 0x03
    1f94:	8a 83       	std	Y+2, r24	; 0x02
	return avg;
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1f9a:	27 96       	adiw	r28, 0x07	; 7
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <temp_arr_voidInit>:

void temp_arr_voidInit(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <temp_arr_voidInit+0x6>
    1fb2:	0f 92       	push	r0
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	u16 first_temp = ADC_u16StartConversion(1)/10;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u16StartConversion>
    1fbe:	2a e0       	ldi	r18, 0x0A	; 10
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__udivmodhi4>
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9b 83       	std	Y+3, r25	; 0x03
    1fcc:	8a 83       	std	Y+2, r24	; 0x02

		for (u8 i = 0; i<TEMP_MEASURES; i++){
    1fce:	19 82       	std	Y+1, r1	; 0x01
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <temp_arr_voidInit+0x44>
			temp_arr[i]= first_temp;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e0 58       	subi	r30, 0x80	; 128
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24

void temp_arr_voidInit(void)
{
	u16 first_temp = ADC_u16StartConversion(1)/10;

		for (u8 i = 0; i<TEMP_MEASURES; i++){
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	8a 30       	cpi	r24, 0x0A	; 10
    1ff4:	70 f3       	brcs	.-36     	; 0x1fd2 <temp_arr_voidInit+0x26>
			temp_arr[i]= first_temp;
		}

		avg_temp = calc_u16Avg_Temp(temp_arr);
    1ff6:	80 e8       	ldi	r24, 0x80	; 128
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <calc_u16Avg_Temp>
    1ffe:	90 93 7d 00 	sts	0x007D, r25
    2002:	80 93 7c 00 	sts	0x007C, r24
		arr_counter = 0;
    2006:	10 92 73 00 	sts	0x0073, r1
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <sleep_voidCommand>:

void sleep_voidCommand(void)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62

}
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <TIMER0_voidInit>:
#include"Timer_Config.h"

/*******	   TIMER 0		******/

void TIMER0_voidInit(void)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,6);
	/* OVERFLOW INTERRUPT ENABLE */
	SET_BIT(TIMSK,1);
#elif TIMER0_MODE==TIMER0_PWM_FAST_MODE
	/* Set PWM_FAST Mode */
	SET_BIT(TCCR0,3);
    202c:	a3 e5       	ldi	r26, 0x53	; 83
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e3 e5       	ldi	r30, 0x53	; 83
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 60       	ori	r24, 0x08	; 8
    2038:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	80 64       	ori	r24, 0x40	; 64
    2046:	8c 93       	st	X, r24

#else
	#error"You have error in set TIMER0 MODE"
#endif
/* Set Prescaler */
	TCCR0&=TIMER0_BITMASK_PRESCALER;
    2048:	a3 e5       	ldi	r26, 0x53	; 83
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e3 e5       	ldi	r30, 0x53	; 83
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	88 7f       	andi	r24, 0xF8	; 248
    2054:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
    2056:	a3 e5       	ldi	r26, 0x53	; 83
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e3 e5       	ldi	r30, 0x53	; 83
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	85 60       	ori	r24, 0x05	; 5
    2062:	8c 93       	st	X, r24
	/* OC0 PINMODE */
#if OC0_PIN_MODE==OC0_PIN_DISCONNECTED
	CLR_BIT(TCCR0,5);
    2064:	a3 e5       	ldi	r26, 0x53	; 83
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e3 e5       	ldi	r30, 0x53	; 83
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7d       	andi	r24, 0xDF	; 223
    2070:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    2072:	a3 e5       	ldi	r26, 0x53	; 83
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e3 e5       	ldi	r30, 0x53	; 83
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8f 7e       	andi	r24, 0xEF	; 239
    207e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
	SET_BIT(TCCR0,4);
#else
	#error"You have error in set TIMER0 MODE"
#endif
}
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Preload)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    2092:	e2 e5       	ldi	r30, 0x52	; 82
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	80 83       	st	Z, r24
}
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <TIMER0_voidSetCTCValue>:

void TIMER0_voidSetCTCValue(u8 Copy_u8CTCValue)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
    20ae:	ec e5       	ldi	r30, 0x5C	; 92
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	80 83       	st	Z, r24
}
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <TIMER2_voidInit>:

/*******	TIMER 2		********/


void TIMER2_voidInit(void)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,6);
	/* OVERFLOW INTERRUPT ENABLE */
	SET_BIT(TIMSK,7);
#elif TIMER2_MODE==TIMER2_PWM_FAST_MODE
	/* Set PWM_FAST Mode */
	SET_BIT(TCCR2,3);
    20c6:	a5 e4       	ldi	r26, 0x45	; 69
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e4       	ldi	r30, 0x45	; 69
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	88 60       	ori	r24, 0x08	; 8
    20d2:	8c 93       	st	X, r24
	SET_BIT(TCCR2,6);
    20d4:	a5 e4       	ldi	r26, 0x45	; 69
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e4       	ldi	r30, 0x45	; 69
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 64       	ori	r24, 0x40	; 64
    20e0:	8c 93       	st	X, r24

#else
	#error"You have error in set TIMER2 MODE"
#endif
/* Set Prescaler */
	TCCR2&=TIMER2_BITMASK_PRESCALER;
    20e2:	a5 e4       	ldi	r26, 0x45	; 69
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e5 e4       	ldi	r30, 0x45	; 69
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	88 7f       	andi	r24, 0xF8	; 248
    20ee:	8c 93       	st	X, r24
	TCCR2|=TIMER2_PRESCALER;
    20f0:	a5 e4       	ldi	r26, 0x45	; 69
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e5 e4       	ldi	r30, 0x45	; 69
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	87 60       	ori	r24, 0x07	; 7
    20fc:	8c 93       	st	X, r24
	/* OC2 PINMODE */
#if OC2_PIN_MODE==OC2_PIN_DISCONNECTED
	CLR_BIT(TCCR2,4);
    20fe:	a5 e4       	ldi	r26, 0x45	; 69
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e4       	ldi	r30, 0x45	; 69
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7e       	andi	r24, 0xEF	; 239
    210a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,5);
    210c:	a5 e4       	ldi	r26, 0x45	; 69
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e4       	ldi	r30, 0x45	; 69
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8f 7d       	andi	r24, 0xDF	; 223
    2118:	8c 93       	st	X, r24
	SET_BIT(TCCR2,4);
	SET_BIT(TCCR2,5);
#else
	#error"You have error in set TIMER2 MODE"
#endif
}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <TIMER2_voidSetPreloadValue>:

void TIMER2_voidSetPreloadValue(u8 Copy_u8Preload)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload;
    212c:	e4 e4       	ldi	r30, 0x44	; 68
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	80 83       	st	Z, r24
}
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <TIMER2_voidSetCTCValue>:

void TIMER2_voidSetCTCValue(u8 Copy_u8CTCValue)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8CTCValue;
    2148:	e3 e4       	ldi	r30, 0x43	; 67
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 83       	st	Z, r24
}
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <main>:
#include "STD_TYPES.h"
#include"EEPROM_Interface.h"
#include "System_Modes_Private.h"
#include "System_Modes_Interface.h"

int main(void){
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <main+0x6>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62

	system_voidInit();
    2162:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <system_voidInit>

	while(1){
		switch (state)
    2166:	80 91 79 00 	lds	r24, 0x0079
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	3a 83       	std	Y+2, r19	; 0x02
    2170:	29 83       	std	Y+1, r18	; 0x01
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	51 f0       	breq	.+20     	; 0x2190 <main+0x38>
    217c:	29 81       	ldd	r18, Y+1	; 0x01
    217e:	3a 81       	ldd	r19, Y+2	; 0x02
    2180:	22 30       	cpi	r18, 0x02	; 2
    2182:	31 05       	cpc	r19, r1
    2184:	59 f0       	breq	.+22     	; 0x219c <main+0x44>
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	21 f0       	breq	.+8      	; 0x2196 <main+0x3e>
    218e:	eb cf       	rjmp	.-42     	; 0x2166 <main+0xe>
		{
			case ON:
			{
				on_voidState();
    2190:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <on_voidState>
    2194:	e8 cf       	rjmp	.-48     	; 0x2166 <main+0xe>
				break;
			}
			case OFF:
			{
				off_voidState();
    2196:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <off_voidState>
    219a:	e5 cf       	rjmp	.-54     	; 0x2166 <main+0xe>
				break;
			}
			case SETTING:
			{
				set_voidState();
    219c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <set_voidState>
    21a0:	e2 cf       	rjmp	.-60     	; 0x2166 <main+0xe>

000021a2 <__vector_18>:


/*     ON/OFF Button ISR     */

void __vector_18(void)  __attribute__((signal));
void __vector_18(void){
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	if(state==OFF){
    21cc:	80 91 79 00 	lds	r24, 0x0079
    21d0:	88 23       	and	r24, r24
    21d2:	69 f4       	brne	.+26     	; 0x21ee <__vector_18+0x4c>
		state = ON;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 79 00 	sts	0x0079, r24
		target_temp = EEPROM_voidRead_Data(0x0000);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_voidRead_Data>
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	90 93 76 00 	sts	0x0076, r25
    21e8:	80 93 75 00 	sts	0x0075, r24
    21ec:	0a c0       	rjmp	.+20     	; 0x2202 <__vector_18+0x60>
	}
	else if (state==ON || state==SETTING){
    21ee:	80 91 79 00 	lds	r24, 0x0079
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	21 f0       	breq	.+8      	; 0x21fe <__vector_18+0x5c>
    21f6:	80 91 79 00 	lds	r24, 0x0079
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__vector_18+0x60>
		state = OFF;
    21fe:	10 92 79 00 	sts	0x0079, r1
	}
}
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	bf 91       	pop	r27
    220c:	af 91       	pop	r26
    220e:	9f 91       	pop	r25
    2210:	8f 91       	pop	r24
    2212:	7f 91       	pop	r23
    2214:	6f 91       	pop	r22
    2216:	5f 91       	pop	r21
    2218:	4f 91       	pop	r20
    221a:	3f 91       	pop	r19
    221c:	2f 91       	pop	r18
    221e:	0f 90       	pop	r0
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	0f 90       	pop	r0
    2224:	1f 90       	pop	r1
    2226:	18 95       	reti

00002228 <__vector_6>:


void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    2228:	1f 92       	push	r1
    222a:	0f 92       	push	r0
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	0f 92       	push	r0
    2230:	11 24       	eor	r1, r1
    2232:	8f 93       	push	r24
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	sensor_flag = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 7f 00 	sts	0x007F, r24
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	8f 91       	pop	r24
    2248:	0f 90       	pop	r0
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	0f 90       	pop	r0
    224e:	1f 90       	pop	r1
    2250:	18 95       	reti

00002252 <__vector_19>:


void __vector_19(void)  __attribute__((signal));
void __vector_19(void){
    2252:	1f 92       	push	r1
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	0f 92       	push	r0
    225a:	11 24       	eor	r1, r1
    225c:	2f 93       	push	r18
    225e:	3f 93       	push	r19
    2260:	8f 93       	push	r24
    2262:	9f 93       	push	r25
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	if ((state==SETTING) || (state==ON)){
    226c:	80 91 79 00 	lds	r24, 0x0079
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	21 f0       	breq	.+8      	; 0x227c <__vector_19+0x2a>
    2274:	80 91 79 00 	lds	r24, 0x0079
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	01 f5       	brne	.+64     	; 0x22bc <__vector_19+0x6a>
		setting_counter++;
    227c:	80 91 74 00 	lds	r24, 0x0074
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	80 93 74 00 	sts	0x0074, r24
		if(setting_counter % 4 == 0)
    2286:	80 91 74 00 	lds	r24, 0x0074
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	83 70       	andi	r24, 0x03	; 3
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	61 f4       	brne	.+24     	; 0x22ae <__vector_19+0x5c>
		{
			toggle_f ^= 1;
    2296:	80 91 77 00 	lds	r24, 0x0077
    229a:	90 91 78 00 	lds	r25, 0x0078
    229e:	21 e0       	ldi	r18, 0x01	; 1
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	82 27       	eor	r24, r18
    22a4:	93 27       	eor	r25, r19
    22a6:	90 93 78 00 	sts	0x0078, r25
    22aa:	80 93 77 00 	sts	0x0077, r24
		}
		if (setting_counter > 20){
    22ae:	80 91 74 00 	lds	r24, 0x0074
    22b2:	85 31       	cpi	r24, 0x15	; 21
    22b4:	18 f0       	brcs	.+6      	; 0x22bc <__vector_19+0x6a>

			// Write the new desired temperature in EEPROM
			state = ON;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 93 79 00 	sts	0x0079, r24
		}
	}
}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	9f 91       	pop	r25
    22c2:	8f 91       	pop	r24
    22c4:	3f 91       	pop	r19
    22c6:	2f 91       	pop	r18
    22c8:	0f 90       	pop	r0
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	0f 90       	pop	r0
    22ce:	1f 90       	pop	r1
    22d0:	18 95       	reti

000022d2 <__udivmodhi4>:
    22d2:	aa 1b       	sub	r26, r26
    22d4:	bb 1b       	sub	r27, r27
    22d6:	51 e1       	ldi	r21, 0x11	; 17
    22d8:	07 c0       	rjmp	.+14     	; 0x22e8 <__udivmodhi4_ep>

000022da <__udivmodhi4_loop>:
    22da:	aa 1f       	adc	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	a6 17       	cp	r26, r22
    22e0:	b7 07       	cpc	r27, r23
    22e2:	10 f0       	brcs	.+4      	; 0x22e8 <__udivmodhi4_ep>
    22e4:	a6 1b       	sub	r26, r22
    22e6:	b7 0b       	sbc	r27, r23

000022e8 <__udivmodhi4_ep>:
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	5a 95       	dec	r21
    22ee:	a9 f7       	brne	.-22     	; 0x22da <__udivmodhi4_loop>
    22f0:	80 95       	com	r24
    22f2:	90 95       	com	r25
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	08 95       	ret

000022fa <__divmodhi4>:
    22fa:	97 fb       	bst	r25, 7
    22fc:	09 2e       	mov	r0, r25
    22fe:	07 26       	eor	r0, r23
    2300:	0a d0       	rcall	.+20     	; 0x2316 <__divmodhi4_neg1>
    2302:	77 fd       	sbrc	r23, 7
    2304:	04 d0       	rcall	.+8      	; 0x230e <__divmodhi4_neg2>
    2306:	e5 df       	rcall	.-54     	; 0x22d2 <__udivmodhi4>
    2308:	06 d0       	rcall	.+12     	; 0x2316 <__divmodhi4_neg1>
    230a:	00 20       	and	r0, r0
    230c:	1a f4       	brpl	.+6      	; 0x2314 <__divmodhi4_exit>

0000230e <__divmodhi4_neg2>:
    230e:	70 95       	com	r23
    2310:	61 95       	neg	r22
    2312:	7f 4f       	sbci	r23, 0xFF	; 255

00002314 <__divmodhi4_exit>:
    2314:	08 95       	ret

00002316 <__divmodhi4_neg1>:
    2316:	f6 f7       	brtc	.-4      	; 0x2314 <__divmodhi4_exit>
    2318:	90 95       	com	r25
    231a:	81 95       	neg	r24
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	08 95       	ret

00002320 <__prologue_saves__>:
    2320:	2f 92       	push	r2
    2322:	3f 92       	push	r3
    2324:	4f 92       	push	r4
    2326:	5f 92       	push	r5
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ca 1b       	sub	r28, r26
    234a:	db 0b       	sbc	r29, r27
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	09 94       	ijmp

00002358 <__epilogue_restores__>:
    2358:	2a 88       	ldd	r2, Y+18	; 0x12
    235a:	39 88       	ldd	r3, Y+17	; 0x11
    235c:	48 88       	ldd	r4, Y+16	; 0x10
    235e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2360:	6e 84       	ldd	r6, Y+14	; 0x0e
    2362:	7d 84       	ldd	r7, Y+13	; 0x0d
    2364:	8c 84       	ldd	r8, Y+12	; 0x0c
    2366:	9b 84       	ldd	r9, Y+11	; 0x0b
    2368:	aa 84       	ldd	r10, Y+10	; 0x0a
    236a:	b9 84       	ldd	r11, Y+9	; 0x09
    236c:	c8 84       	ldd	r12, Y+8	; 0x08
    236e:	df 80       	ldd	r13, Y+7	; 0x07
    2370:	ee 80       	ldd	r14, Y+6	; 0x06
    2372:	fd 80       	ldd	r15, Y+5	; 0x05
    2374:	0c 81       	ldd	r16, Y+4	; 0x04
    2376:	1b 81       	ldd	r17, Y+3	; 0x03
    2378:	aa 81       	ldd	r26, Y+2	; 0x02
    237a:	b9 81       	ldd	r27, Y+1	; 0x01
    237c:	ce 0f       	add	r28, r30
    237e:	d1 1d       	adc	r29, r1
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	ed 01       	movw	r28, r26
    238c:	08 95       	ret

0000238e <_exit>:
    238e:	f8 94       	cli

00002390 <__stop_program>:
    2390:	ff cf       	rjmp	.-2      	; 0x2390 <__stop_program>
